Resources Properties / Config
models:
  - name: mais uma tabela
    description: text or docs block
    docs:
      show: true 
    config:
      enabled: true 
      sql_header:  start of the transaction
      materialized: table, view, incremental, ephemeral

      contract:
        enforced: true
      
      pre-hook: before running this model
      post-hook: after running this model

      database: generate_database_name macro work
      schema: generate_schema_name macro work
      alias: final name in relation 

      meta:
        nice: 'day'
        owner: 'jesus'
      tags: ['a', 'b','c']

      full_refresh: false

      grants: 
        +select: ['a','b']
        role: principal
        
    tests:
      - singular_test
      - custom_generic_test 
    
    constraints:
      - type: not_null, unique, primary_key, foreign_key, custom, check
        columns:

    columns:
      - name:
        description:
        meta:
        tags:
        data_type: 
        constraints:
          - type: foreign_key 
            expression: schema.table (coluna z)
        quote: true
---------------------------------------------------------------------------------------------------------------------------------------
exposures:
  - name: powerbi
    description: bi muito massa 
    label: nicebi 
    type: ['dashboard','analysis','notebook','ml','applicaiton']
    maturity: low, medium, high
    url: url
    
    tags: ['a','b']
    meta:
      pii: True
      department: finances

    depends_on:
      - source('source_name','nice_day')
      - ref('teste')
    owner:
      name:
      email:
---------------------------------------------------------------------------------------------------------------------------------------
snapshots:
  - name:
    description:
    config:
      enabled: 
      meta:
      tags:

      target_schema: prod
      target_database: prod_database
      strategy: timestamp, check
      updated_at:
      check_cols:
      unique_key:
---------------------------------------------------------------------------------------------------------------------------------------
seeds:
  - name: testando
    description: mais uma seed simples
    config:
      enabled: true 

      column_types:
      delimiter:
      quote_columns:

      database:
      schema:
      alias:

      persist_docs:
        relation: true 
        columns: true 

      pre-hook:
      post-hook:

      full_refresh: 

      meta:
      tags:

      grants:

    tests:
---------------------------------------------------------------------------------------------------------------------------------------
tests:
---------------------------------------------------------------------------------------------------------------------------------------
Models:
---------------------------------------------------------------------------------------------------------------------------------------
Seeds:
- Csvs version controlled
- Unchanged frequent data
- Materialized as table
- Small data (Static Data)
---------------------------------------------------------------------------------------------------------------------------------------
packages.yml:
  packages:
    - package: dbt-utils/teste
      version: 0.3.0

      git: https git
      revision: tag (release), commit, branch
---------------------------------------------------------------------------------------------------------------------------------------
Exposures:
- Obrigatorio eh owner, type, name
---------------------------------------------------------------------------------------------------------------------------------------
Snapshots:
- ANotar aqui e deixar link do best practices with snapshots
---------------------------------------------------------------------------------------------------------------------------------------
Analyses:
- Version Controlled
- .sql files  
- Analyses Folder
- Support Jinja
- dbt compile
---------------------------------------------------------------------------------------------------------------------------------------
Macros
---------------------------------------------------------------------------------------------------------------------------------------
Sources
---------------------------------------------------------------------------------------------------------------------------------------
Documentation

---------------------------------------------------------------------------------------------------------------------------------------



---------------------------------------------------------------------------------------------------------------------------------------
Jinja Templating Language
- Dry Principle (Reusable)
- Importante para macros em geral e principalmente uso da {{ref e source}}
- Importantes Functions 
 -- set
 -- for
 -- if, else
 -- do
 -- log
 -- run_query
 -- execute
 -- ~ (Concatenation)
---------------------------------------------------------------------------------------------------------------------------------------
Packages 
- https://docs.getdbt.com/docs/build/packages
- Instala-se pacote com dbt deps
- Diretorio fica em packages-install-path em dbt_project.yml 
 -- Default eh dbt_packages
- Boa pratica eh sempre pegar latest patch of minor version
- Usa-se geralmente env variable DBT_ENV_SECRET, pois
  -- Nao aparece no logs
  -- Jinja so da parse nela em packages.yml e em profiles.yml
  -- bom pra usar os tokens
---------------------------------------------------------------------------------------------------------------------------------------
Enviroment Variables

---------------------------------------------------------------------------------------------------------------------------------------
Materializations
---------------------------------------------------------------------------------------------------------------------------------------
Hooks
---------------------------------------------------------------------------------------------------------------------------------------
Variables
- Usados no contexto geral do projeto(package) ou ainda no contexto geral dos projetos
- Pode ser usado em
 -- Models
 -- Hooks
 -- Macros
- Precedence Order 
 1 CLI ARGS 
 2 Escopo Local
 3 Escopo Global
 4 Default Variable

dbt run --vars '{chave:valor}'

 {{ var('variablez') }}
---------------------------------------------------------------------------------------------------------------------------------------
dbt run-operation --args 
---------------------------------------------------------------------------------------------------------------------------------------
Webooks
---------------------------------------------------------------------------------------------------------------------------------------
Target Variable, CUstom Schema (Dbt Cloud vs Dbt COre)
- Explicar bem direitim e entender todo esswe workflow inclusive dev vs prod
---------------------------------------------------------------------------------------------------------------------------------------
Data Contracts

---------------------------------------------------------------------------------------------------------------------------------------

# Courses 
- Advanced Deployment
- Hooks 
- Slim CI CD
- Workflows
- Best Practices
- Materialization and Advanced Materializaton
- Incremental On Schema Chnage and etc
- Refactoring Legacy Code

- Seletores
    - Tests (Indirect, Eager)
    - Models, Seeds, etc
    - Union, Intersect
    - Defer, Modified
    - Lineagre Graph (+3, +2)
    - Source, tags, etc, testar tudo
    - Path, etc

- dbt Cloud
    - Enviroments
    - Target
    - Jobs
    - Prod vs Dev workflow
    - Target Schema (COre and Cloud Comparsion)

- Commands 
    - Build and main flags (--fail-fast, etc)
    -- Modified, stale
    - dbt run --select results: sucess, error, etc type of errors
      -- Models, seeds, snapshots, tests

- Advanced Deployment 
    - CI CD
    - Slim CI/CD
    - Branch Strategies


- Hooks 
    - Precedence Order
    - Use Cases

- Documentation
- Exposures

- How to organize the project followinng best practices

- Termos
    - Upstream and downstream
    - Dependent and its dependencies


##  Get use again with what are these kind of questions

    • Multiple-choice
    • Fill-in-the-blank
    • Matching
    • Hotspot
    • Build list
    • Discrete Option Multiple Choice (DOMC)
---------------------------------------------------------------------------------------------------------------------------------------
Tests
- https://docs.getdbt.com/best-practices/writing-custom-generic-tests
 -- Ler parte debaixo tb
- https://docs.getdbt.com/reference/resource-configs/store_failures


Enviroments
https://docs.getdbt.com/docs/environments-in-dbt

DBT Cloud
https://docs.getdbt.com/docs/cloud/about-cloud/dbt-cloud-features

Error TYpes
- Database, Parsing, COmpliation (Ver no site)

Custom Schemas
- https://docs.getdbt.com/docs/build/custom-schemas

Graph Operators
https://docs.getdbt.com/reference/node-selection/set-operators#unions

Test Selectors
https://docs.getdbt.com/reference/node-selection/test-selection-examples

Methods
https://docs.getdbt.com/reference/node-selection/methods#the-state-method

Defer
https://docs.getdbt.com/docs/cloud/about-cloud-develop-defer

Threads
https://docs.getdbt.com/docs/running-a-dbt-project/using-threads


Artifacts
- Manifest.json, catalog.json, sources.json, run_results.json
- dbt docs generate gera catalog.json(Relacionado ao dw metadado ) e index.html (site estatico)
- dbt source freshness gera sources.json (Stale or not, errors, warning, etc)
- dbt run gera run_results.json 
- manifest.json sao informacoes do proprio dbt gerados pelo dbt comandos

https://docs.getdbt.com/reference/artifacts/dbt-artifacts


LER ISSO!
https://docs.getdbt.com/docs/faqs


Best Practices
https://docs.getdbt.com/best-practices/how-we-structure/1-guide-overview


https://docs.getdbt.com/reference/references-overview

Grants (Read about it)
  - https://docs.getdbt.com/reference/resource-configs/grants
  - model, seed, snapshot
  - Privilege and grantee

  - hooks may be appropriate if you want to:

  Apply grants in a more complex or custom manner, beyond what the built-in grants capability can provide.
  Apply grants on other database objects besides views and tables.
  Take advantage of more-advanced permission capabilities offered by your data platform, for which dbt does not (yet!) offer out-of-the-box support using resource configuration.
  Create more granular row- and column-level access, use masking policies, or apply future grants.

Seletores
https://docs.getdbt.com/reference/node-selection/syntax#about-node-selection


CI / Slim CI


Materializations
---------------------------------------------------------------------------------------------------------------------------------------
- 4 Tipos Basicos 
 -- View, Table, Ephemeral, Incremental

- Tables
 -- Faster to Query
 -- Slower to build
 -- Stored on disk

- Views
 -- Faster to build
 -- Slower to query (If has complex calculation, gets worse and worse)
 -- Query stored on db 

- Ephemeral
 -- Reusable 
 -- Can not be queried
 -- Not created on target DW

- Incremental
 -- Faster to build
 -- First run, build table
 -- After run, its incremental
 -- Works with is_incremental() macro

SELECT * FROM
source('source','table_name')
{% if is_incremental() %}
WHERE loadtimestamp >= (SELECT MAX(loadtimestamp) from {{ this }})
{% endif %}

is_incremental retorna true when
- Ja existe como tabela materializada no banco
- --full-refresh flag nao eh passada. Se for passada, mas no config  ta como false, is incremental retorna verdadeiro mesmo assim

Usa unique_key como config alem do materialized para usar outras estrategias incrementais (incremental_strategy)
como merge, insert_overwrite, upsert

on_schema_change era para evitar full_refresh quando schema change
fail: se mudar da erro
ignore: default (se adicionar novas colunas ou remover, nao vai aparecer)
sync_all_columns: se mudar datatype, pode ser full scan depdendno do banco
sync as coluas, adicionando e/ou removendo-as
append_new_colums: se ttiver novas colunas, adiciona-se as 





Git workflow


 Incremental
 - Faster to build 
 - First run, build all table 
 - After its incremental


 incremental_strategy: merge, append, upsert, insert_overwrite

 on_schema_change:
 ignore 
 fail 
 sync_all_columns:
 append_new_columns

 Default behaviro eh ignore 
 - se adicionarem ou removerem colu, dbt ta nem ai 
 - se quiser novos dados ou novos shemas
  tem append_new_columns que adiciona novos, syncl_all_ colums que adiciona novos e remove velhos
   -- Depdendno do banco sync_all_columns faz table scan e nao incremental
  fail da erro
https://docs.getdbt.com/docs/build/materializations


Best Practices
https://docs.getdbt.com/best-practices


State and Defer

Workflows (Importante pois cai na prova)
https://docs.getdbt.com/best-practices/best-practice-workflows#pro-tips-for-workflows


Full_refresh Flag 
-- https://docs.getdbt.com/reference/resource-configs/full_refresh
- Funciona para models e seeds 
-- Se tiver setado como config, passa por cima do CLI flag
-- Se nao tiver setado na config (omitido), CLI flag passa por cima


- Ver se preciso estudar isso
https://docs.getdbt.com/docs/build/unit-tests



Hooks
- Models, Seeds e snapshots
- Acumulativos
- Precedence Order
 -- Hooks de pacotes dependentes antes do pacote ativo
 -- Hooks do projeto  rodam antes do hooks a nivel de config
 -- Hooks rodam na ordem que sao definidos


Documentation 


Tests
- Out-of-box Generic Tests
- Custom Writing of Generic Tests
- Singular Tests 
- Test Selectors Mode (Eager, Indirect, etc) -> (TESTAR!)

Contracts


Materialization
- Pros / Cons
- Types
- Strategies of Incremental
- full_refresh macro
- is_incremental macro
- on_schema_change use cases










Target Variable (COre and Dbt cloud workflow)


- Target Variables
 -- target.name
 -- target.database
 -- target.schema
 -- target.port



{{ target.name}}

- Talvez estudar metric and python models

- Ler documentacao e FAQ
- Ler sobre custom problems como 
  --https://discourse.getdbt.com/t/creating-an-error-threshold-for-schema-tests/966

- Hooks 
 -- Rodam antes de models, seeds e snapshots
 -- pre-hooks and post-hooks



Contracts / Constraints
- Only when contract \n\t enforced: true 
- So funciona para table e incremental
constraints:
  - type: primary_key
    columns: ['columnaa','columnb']
  - type: foreign_key
    columns:

Enviroments
- '{{env_var("nice","kkkk")}}'
- One development branch of each user with specific target.name, dbt versiom, etc
- Many Production Enviroments 
 -- env name
 -- dbt.version 
 -- Database, schema target, user, credentials


-- Study defer method


Jobs
- Job name
- target.name
- States (Defer )
- Deployed with triggers
  -- API, schedule, webhooks 

Cloud 
- git clone 
- dw connection
- dbt deps 


Snapshots
- 3 config sao obrigatorios (target_schema, strategy, unique_key)
- Gera 4 campos de metadados 
 -- dbt_valid_to
 -- dbt_valid_from
 -- dbt_updated_at
 -- dbt_scd_id
- Ver os valores desses campos quando usa strategy timestamp and check 
 - Na strategegia de timestamp, o dbt_update_at vai ser sempre igual a dbt_valid_from
  -- Ver como fica na outra estrategia
 - Estudar invalidate hard deletes do snapshot
 - target_database = Default eh target.database,se passavado um novo eh overwrite por cima
 - target_schema = Obrigatorio e nao eh mesma coisa do target gerado pelo generate_schema_name dos models, seeds e tests


Sources
- Se nao passar custom schema, schema vai ser name:
- Se nao passar custom database, database vai ser target.database:

- Quando materializa mesmo relation como table, a view antiga eh deletada, very nice

catalog.json e index.html foram gerados com dbt docs generate
Referenced by  eh quando eh usado downstream
