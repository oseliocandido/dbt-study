Resources Properties / Config
models:
  - name: mais uma tabela
    description: text or docs block
    docs:
      show: true 
    config:
      enabled: true 
      sql_header:  start of the transaction
      materialized: table, view, incremental, ephemeral

      contract:
        enforced: true
      
      pre-hook: before running this model
      post-hook: after running this model

      database: generate_database_name macro work
      schema: generate_schema_name macro work
      alias: final name in relation 

      meta:
        nice: 'day'
        owner: 'jesus'
      tags: ['a', 'b','c']

      full_refresh: false

      grants: 
        +select: ['a','b']
        role: principal
        
    tests:
      - singular_test
      - custom_generic_test 
    
    constraints:
      - type: not_null, unique, primary_key, foreign_key, custom, check
        columns:

    columns:
      - name:
        description:
        meta:
        tags:
        data_type: 
        constraints:
          - type: foreign_key 
            expression: schema.table (coluna z)
        quote: true
---------------------------------------------------------------------------------------------------------------------------------------
exposures:
  - name: powerbi
    description: bi muito massa 
    label: nicebi 
    type: ['dashboard','analysis','notebook','ml','applicaiton']
    maturity: low, medium, high
    url: url
    
    tags: ['a','b']
    meta:
      pii: True
      department: finances

    depends_on:
      - source('source_name','nice_day')
      - ref('teste')
    owner:
      name:
      email:
---------------------------------------------------------------------------------------------------------------------------------------
snapshots:
  - name:
    description:
    config:
      enabled: 
      meta:
      tags:

      target_schema: prod
      target_database: prod_database
      strategy: timestamp, check
      updated_at:
      check_cols:
      unique_key:
---------------------------------------------------------------------------------------------------------------------------------------
seeds:
  - name: testando
    description: mais uma seed simples
    config:
      enabled: true 

      column_types:
      delimiter:
      quote_columns:

      database:
      schema:
      alias:

      persist_docs:
        relation: true 
        columns: true 

      pre-hook:
      post-hook:

      full_refresh: 

      meta:
      tags:

      grants:

    tests:
---------------------------------------------------------------------------------------------------------------------------------------
tests:
  config:
    
    database:
    schema:
    alias:
    
    where:
    limit:
    warn_if:
    error_if:
    store_failures:
---------------------------------------------------------------------------------------------------------------------------------------
Models:
- Sao materializados como default as view
- Ficam em models directory
- Buildados com dbt run, dbt build
---------------------------------------------------------------------------------------------------------------------------------------
Seeds:
- Csvs version controlled
- Unchanged frequent data
- Materialized as table
- Small data (Static Data)
---------------------------------------------------------------------------------------------------------------------------------------
packages.yml:
  packages:
    - package: dbt-utils/teste
      version: 0.3.0

      git: https git
      revision: tag (release), commit, branch
---------------------------------------------------------------------------------------------------------------------------------------
Exposures:
- Obrigatorio eh owner, type, name
---------------------------------------------------------------------------------------------------------------------------------------
Snapshots:
- Sempre selecionar todas as colunas
- Obrigatorio target_schema, strategy and unique_key
- Invalidate hard deletes eh falso por default e se for true ele coloca valores que n existem mais como dbt_valid_to = current_timestamp 
- Fazer joins downstream
- Permissoes especiais nesse schema onde tem snapshots pra ser acessado mesmo objeto por diferentes usuarios
- SCD TYPE 2
- check -> check_cols
- timestamp -> update_at
- Schema dar overwrite, mas pode ser personalizadao com "{{generate_schema_name('nice')}}"
---------------------------------------------------------------------------------------------------------------------------------------
Analyses:
- Version Controlled
- .sql files  
- Analyses Folder
- Support Jinja
- dbt compile
---------------------------------------------------------------------------------------------------------------------------------------
Macros:
---------------------------------------------------------------------------------------------------------------------------------------
Sources:
---------------------------------------------------------------------------------------------------------------------------------------
Documentation:
- Gerado com dbt docs generate e serve-se o site com dbt docs serve
- Asset-paths
 -- Com dbt docs generate, os assests dessa pasta sao copiados para diretorio target
- Esse dbt docs generate gera catalog.json, index.html, copia os assets e tb gera manifest.json
 -- Note manifest json eh gerado por qualquer comandop que faz parse menos
   --- dbt deps, dbt clean, dbt debug, dbt init
- Usa-se macro {% docs nice_doc %} pra criar markdown description e usa-se ele no yaml com "{{'doc(nice_doc)'}}"
- Tem-se macro pra {% docs __overview__ %} pra mostrar pagina inicial do docs ou usando-se nome do projeto/pacote
---------------------------------------------------------------------------------------------------------------------------------------
Grants:
- Antigamente era feito com post-hook
- Agora eh feito com grants privilege-principal
- Pra evitar clobber and merge behavior faz-se +select- jose
---------------------------------------------------------------------------------------------------------------------------------------
Jinja Templating Language:
- Dry Principle (Reusable)
- Importante para macros em geral e principalmente uso da {{ref e source e config}}
- Importantes Functions 
 -- set
 -- for
 -- if, else
 -- do
 -- log
 -- run_query
 -- execute
 -- ~ (Concatenation)
---------------------------------------------------------------------------------------------------------------------------------------
Packages: 
- https://docs.getdbt.com/docs/build/packages
- Instala-se pacote com dbt deps
- Diretorio fica em packages-install-path em dbt_project.yml 
 -- Default eh dbt_packages
- Boa pratica eh sempre pegar latest patch of minor version
- Usa-se geralmente env variable DBT_ENV_SECRET, pois
  -- Nao aparece no logs
  -- Jinja so da parse nela em packages.yml e em profiles.yml
  -- bom pra usar os tokens
---------------------------------------------------------------------------------------------------------------------------------------
Enviroment Variables:
- Precedence Order
---------------------------------------------------------------------------------------------------------------------------------------
Materializations
- 4 Tipos Basicos 
 -- View, Table, Ephemeral, Incremental

- Tables
 -- Faster to Query
 -- Slower to build
 -- Stored on disk

- Views
 -- Faster to build
 -- Slower to query (If has complex calculation, gets worse and worse)
 -- Query stored on db 

- Ephemeral
 -- Reusable 
 -- Can not be queried
 -- Not created on target DW

- Incremental
 -- Faster to build
 -- First run, build table
 -- After run, its incremental
 -- Works with is_incremental() macro

Incremental
    SELECT * FROM source('source','table_name')
    {% if is_incremental() %}
    WHERE loadtimestamp >= (SELECT MAX(loadtimestamp) from {{ this }})
    {% endif %}

    is_incremental retorna true when
    - Ja existe como tabela materializada no banco
    - Ta como materialized: incremental
    - --full-refresh flag nao eh passada. 
      -- Se for passada, mas no config  ta como false, is incremental retorna verdadeiro mesmo assim (Rever isso aqui)

    Usa unique_key como config alem do materialized para usar outras estrategias incrementais (incremental_strategy)
    como merge, insert_overwrite, upsert (Revisar strategies)

    on_schema_change era para evitar full_refresh quando schema change
    fail: se mudar da erro
    ignore: default (se adicionar novas colunas ou remover, nao vai aparecer)
    sync_all_columns: se mudar datatype, pode ser full scan depdendno do banco
    sync as coluas, adicionando e/ou removendo-as
    append_new_colums: se ttiver novas colunas, adiciona-se as 
---------------------------------------------------------------------------------------------------------------------------------------
Hooks
- Sao usados no dbt_project.yml, config blocks and yamls dos resources
- pre-hook and post-hook
- ROda antes e dps do build dos objetos em models, seeds, snapshots
- Precedence Order
 -- Pacotes Dependentes
 -- Pacote Ativo
 -- Dbt_project.yml
 -- Yaml
 -- Ordem que sao definidos
---------------------------------------------------------------------------------------------------------------------------------------
Variables
- Usados no contexto geral do projeto(package) ou ainda no contexto geral dos projetos
- Pode ser usado em
 -- Models
 -- Hooks
 -- Macros
- Precedence Order 
 1 CLI ARGS 
 2 Escopo Local
 3 Escopo Global
 4 Default Variable

dbt run --vars '{chave:valor}'

 {{ var('variablez') }}
---------------------------------------------------------------------------------------------------------------------------------------
dbt run-operation --args 
---------------------------------------------------------------------------------------------------------------------------------------
Webooks
- Outgoing webhooks with METHOD post to external integrated tools
- Job Status (Error, Start, Completed)
---------------------------------------------------------------------------------------------------------------------------------------
Data Contracts
- Usados em modelos para evitar entrar data_types que nao sao de acordo com schema definido
- contract-enforced-true
- A nivel de modelo e a nivel de coluna
- 5 tipos basicos
 -- not_null
 -- unique
 -- primary_key
 -- foreign_Key
 -- custom (expression)
 -- check (expression)
- constraints -> type,columns, expression, name
---------------------------------------------------------------------------------------------------------------------------------------

# Courses 
- Advanced Deployment
- Hooks 
- Slim CI CD
- Workflows
- Best Practices
- Materialization and Advanced Materializaton
- Incremental On Schema Chnage and etc
- Refactoring Legacy Code

- Seletores
    - Tests (Indirect, Eager)
    - Models, Seeds, etc
    - Union, Intersect
    - Defer, Modified
    - Lineagre Graph (+3, +2)
    - Source, tags, etc, testar tudo
    - Path, etc

- dbt Cloud
    - Enviroments
    - Target
    - Jobs
    - Prod vs Dev workflow
    - Target Schema (COre and Cloud Comparsion)

- Commands 
    - Build and main flags (--fail-fast, etc)
    -- Modified, stale
    - dbt run --select results: sucess, error, etc type of errors
      -- Models, seeds, snapshots, tests

- Advanced Deployment 
    - CI CD
    - Slim CI/CD
    - Branch Strategies
Target Variable, CUstom Schema (Dbt Cloud vs Dbt COre)
- Explicar bem direitim e entender todo esswe workflow inclusive dev vs prod

- Hooks 
    - Precedence Order
    - Use Cases

- Documentation
- Exposures

- How to organize the project followinng best practices

- Termos
    - Upstream and downstream
    - Dependent and its dependencies


##  Get use again with what are these kind of questions
    • Multiple-choice
    • Fill-in-the-blank
    • Matching
    • Hotspot
    • Build list
    • Discrete Option Multiple Choice (DOMC)
---------------------------------------------------------------------------------------------------------------------------------------
Tests
- https://docs.getdbt.com/best-practices/writing-custom-generic-tests

 -- Ler parte debaixo tb
- https://docs.getdbt.com/reference/resource-configs/store_failures



DBT Cloud
https://docs.getdbt.com/docs/cloud/about-cloud/dbt-cloud-features

Error TYpes
- Database, Parsing, COmpliation (Ver no site)

## On-run-start  and on-run-end
- Ler no site e fazer resumo disso

## Threads
- Threas behavior

Custom Schemas
- https://docs.getdbt.com/docs/build/custom-schemas

Graph Operators
https://docs.getdbt.com/reference/node-selection/set-operators#unions

Test Selectors
https://docs.getdbt.com/reference/node-selection/test-selection-examples

Methods
https://docs.getdbt.com/reference/node-selection/methods#the-state-method

Defer
https://docs.getdbt.com/docs/cloud/about-cloud-develop-defer

Threads
https://docs.getdbt.com/docs/running-a-dbt-project/using-threads


Artifacts
- Manifest.json, catalog.json, sources.json, run_results.json
- dbt docs generate gera catalog.json(Relacionado ao dw metadado ) e index.html (site estatico)
- dbt source freshness gera sources.json (Stale or not, errors, warning, etc)
- dbt run gera run_results.json 
- manifest.json sao informacoes do proprio dbt gerados pelo dbt comandos

https://docs.getdbt.com/reference/artifacts/dbt-artifacts


LER ISSO!
https://docs.getdbt.com/docs/faqs


Best Practices
https://docs.getdbt.com/best-practices/how-we-structure/1-guide-overview


https://docs.getdbt.com/reference/references-overview

Grants (Read about it)
  - https://docs.getdbt.com/reference/resource-configs/grants
  - model, seed, snapshot
  - Privilege and grantee
  
## Grants 
- Study [Grants](https://docs.getdbt.com/reference/resource-configs/grants)

  - hooks may be appropriate if you want to:

  Apply grants in a more complex or custom manner, beyond what the built-in grants capability can provide.
  Apply grants on other database objects besides views and tables.
  Take advantage of more-advanced permission capabilities offered by your data platform, for which dbt does not (yet!) offer out-of-the-box support using resource configuration.
  Create more granular row- and column-level access, use masking policies, or apply future grants.

Seletores
https://docs.getdbt.com/reference/node-selection/syntax#about-node-selection


CI / Slim CI


Materializations
---------------------------------------------------------------------------------------------------------------------------------------








Git workflow


 Incremental
 - Faster to build 
 - First run, build all table 
 - After its incremental


 incremental_strategy: merge, append, upsert, insert_overwrite

 on_schema_change:
 ignore 
 fail 
 sync_all_columns:
 append_new_columns

 Default behaviro eh ignore 
 - se adicionarem ou removerem colu, dbt ta nem ai 
 - se quiser novos dados ou novos shemas
  tem append_new_columns que adiciona novos, syncl_all_ colums que adiciona novos e remove velhos
   -- Depdendno do banco sync_all_columns faz table scan e nao incremental
  fail da erro
https://docs.getdbt.com/docs/build/materializations


Best Practices
https://docs.getdbt.com/best-practices


State and Defer

Workflows (Importante pois cai na prova)
https://docs.getdbt.com/best-practices/best-practice-workflows#pro-tips-for-workflows


Full_refresh Flag 
-- https://docs.getdbt.com/reference/resource-configs/full_refresh
- Funciona para models e seeds 
-- Se tiver setado como config, passa por cima do CLI flag
-- Se nao tiver setado na config (omitido), CLI flag passa por cima


- Ver se preciso estudar isso
https://docs.getdbt.com/docs/build/unit-tests






## Seletores
- Tests 
 -- Indirect Selection, Eager
- States 
 -- Artifcats with defer, state, modifield
- Seletores em run, seed
 -- Union, intersect, exclude, package, source, all 
 -- Rever tudo e testar na pratica com lineage
- Dbt build and main args like --fail-fast
- Out-of-box Generic Tests
- Custom Writing of Generic Tests
- Singular Tests 
- Test Selectors Mode (Eager, Indirect, etc) -> (TESTAR!)
















- Talvez estudar metric and python models

- Ler documentacao e FAQ
- Ler sobre custom problems como 
  --https://discourse.getdbt.com/t/creating-an-error-threshold-for-schema-tests/966

- Hooks 
 -- Rodam antes de models, seeds e snapshots
 -- pre-hooks and post-hooks



Contracts / Constraints
- Only when contract \n\t enforced: true 
- So funciona para table e incremental
constraints:
  - type: primary_key
    columns: ['columnaa','columnb']
  - type: foreign_key
    columns:

Enviroments
- '{{env_var("nice","kkkk")}}'
- One development branch of each user with specific target.name, dbt versiom, etc
- Many Production Enviroments 
 -- env name
 -- dbt.version 
 -- Database, schema target, user, credentials


-- Study defer method


Jobs
- Job name
- target.name
- States (Defer )
- Deployed with triggers
  -- API, schedule, webhooks 

Cloud 
- git clone 
- dw connection
- dbt deps 


Snapshots
- 3 config sao obrigatorios (target_schema, strategy, unique_key)
- Gera 4 campos de metadados 
 -- dbt_valid_to
 -- dbt_valid_from
 -- dbt_updated_at
 -- dbt_scd_id
- Ver os valores desses campos quando usa strategy timestamp and check 
 - Na strategegia de timestamp, o dbt_update_at vai ser sempre igual a dbt_valid_from
  -- Ver como fica na outra estrategia
 - Estudar invalidate hard deletes do snapshot
 - target_database = Default eh target.database,se passavado um novo eh overwrite por cima
 - target_schema = Obrigatorio e nao eh mesma coisa do target gerado pelo generate_schema_name dos models, seeds e tests


Sources
- Se nao passar custom schema, schema vai ser name:
- Se nao passar custom database, database vai ser target.database:

- Quando materializa mesmo relation como table, a view antiga eh deletada, very nice

catalog.json e index.html foram gerados com dbt docs generate
Referenced by  eh quando eh usado downstream


ources e snapshots nao tem concatenacao. SObrescrever mesmo!

## Advanced Testing
- CI CD
- Schema Tests (Generic Tests)
- Singular Tests
- Custom Generic Tests
- source fresnness

- Deployment tests, etc
- dbt test to run it  on local dev or in production with dbt build generallty
- Eager, Indirect, etc

Source Fresnhess geralmente obivamente sao em jobs de producao


Tests Precedence in Generic Tests
1.  dbt_project.yml
2.  config of generic test
3.  yaml config



Integration tests

Da pra usar dbt run-operation --args
- Estudar flags

Development Ad-hoc with dbt test
CI CD test before PR creation

- Testar PR Schema com dbt Cloud

Em production se teste falha, manda slack, email ou algo pra dizer que deu ruim algo

PULL requests - Se falhar n da pra dar merge, se der bom da pra dar mege
- dbt build --models state:modified+ (Olha no manifest.json do branch que que fazer merge e do ultimo production sucessfull )


Tests in QA branch
(Reler Branch Strategies)
https://docs.getdbt.com/docs/deploy/continuous-integration


Models, seeds, snapshots e tests tem run_results 
sucess, error, skipped, fail, warn pass

When to test
- When to test
There are 4 major points in time when you should consider testing your code

In development, it is critical to test your changes to modeling logic while you make changes. This can help individual developers find bugs before opening a pull request.

In production, it is important to continue testing your code to catch failures when they happen. This can empower the data team to catch data quality issues well before stakeholders are impacted.

When proposing changes / opening a pull or merge request, we can run automated tests against our proposed changes to catch any issues that may not have been caught in the development cycle mentioned above.

On a middle / qa branch, it can be helpful to test a batch of changes that have been made in an isolated testing environment before then merging the code to the main / production branch.

-----------------------
No bbt build se error tiver com severidade warn ele da warn mas n da skill nos modelos downstgream, continuinaod processo
de build (run e test)

The --resource-type and --exclude-resource-type flags include or exclude resource types (such as unit tests) from the dbt run, dbt build, and dbt clone commands

dbt_test__audit

## Artifcats
- Sources, run_results, manifest, catalog
- Ver agora onde esta os codigos do run_results
- [Artifacts](https://docs.getdbt.com/docs/deploy/artifacts)
- [Source Freshnness](https://docs.getdbt.com/docs/deploy/source-freshness)
 -- Entender como funciona ele relacionado com defer no cloud e local

 
## Best Practices
- [Best Practices](https://docs.getdbt.com/best-practices)
- CI CD
- Folder Structure
- Snapshots



Treinar Seletores